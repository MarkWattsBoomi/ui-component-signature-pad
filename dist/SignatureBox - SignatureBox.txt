!function(t){function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:i})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(t,e){t.exports=React},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(2))},function(t,e,n){"use strict";var i=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=n(3);n(7);var s=function(t){function e(e){var n=t.call(this,e)||this;n.componentId="",n.flowKey="",n.attributes={},n.selectedItem=null,n.text="",n.componentId=e.id,n.flowKey=e.flowKey;var i=manywho.model.getComponent(n.props.id,n.props.flowKey);if(i.attributes)for(var o in i.attributes)n.attributes[o]=i.attributes[o];return n}return i(e,t),e.prototype.componentDidMount=function(){var t=manywho.model.getComponent(this.props.id,this.props.flowKey),e=manywho.state.getComponent(this.props.id,this.props.flowKey);if(t.contentValue){e.contentValue=t.contentValue;this.refs.signaturePad.fromDataURL(t.contentValue)}this.forceUpdate()},e.prototype.componentDidUpdate=function(){this.refs.signaturePad},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.clearSignature=function(){var t=this.refs.signaturePad;t.clear();var e=t.toDataURL();manywho.state.getComponent(this.props.id,this.props.flowKey).contentValue=e},e.prototype.strokeEnd=function(){var t=this.refs.signaturePad,e=t.toDataURL();manywho.state.getComponent(this.props.id,this.props.flowKey).contentValue=e},e.prototype.render=function(){var t=(manywho.model.getComponent(this.props.id,this.props.flowKey),manywho.state.getComponent(this.props.id,this.props.flowKey),{});t.width="100px",t.height="70",t.penColor="#000000",t.redrawOnResize=!0,t.onEnd=this.strokeEnd.bind(this);return o.createElement("div",{className:"signature-box"},o.createElement("div",{className:"signature-box-header"},o.createElement("div",{style:{float:"left"}},o.createElement("span",{className:"signature-box-header-title"},"Signature - please draw your signature in the area below")),o.createElement("div",{style:{float:"right"}},o.createElement("span",{className:"glyphicon glyphicon-remove signature-box-header-button",onClick:this.clearSignature.bind(this)}))),o.createElement("div",{className:"signature-box-body"},o.createElement(r,{ref:"signaturePad",redrawOnResize:!0,options:t})))},e}(o.Component);manywho.component.register("SignatureBox",s),e.default=s},function(t,e,n){"use strict";function i(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function o(t,e,n){this.x=t,this.y=e,this.time=n||(new Date).getTime()}function r(t,e,n,i){this.startPoint=t,this.control1=e,this.control2=n,this.endPoint=i}function s(t,e,n){var i,o,r,s=null,a=0;n||(n={});var h=function(){a=!1===n.leading?0:Date.now(),s=null,r=t.apply(i,o),s||(i=o=null)};return function(){var u=Date.now();a||!1!==n.leading||(a=u);var c=e-(u-a);return i=this,o=arguments,c<=0||e<c?(s&&(clearTimeout(s),s=null),a=u,r=t.apply(i,o),s||(i=o=null)):s||!1===n.trailing||(s=setTimeout(h,c)),r}}function a(t,e){var n=this,i=e||{};this.velocityFilterWeight=i.velocityFilterWeight||.7,this.minWidth=i.minWidth||.5,this.maxWidth=i.maxWidth||2.5,this.throttle="throttle"in i?i.throttle:16,this.minDistance="minDistance"in i?i.minDistance:5,this.throttle?this._strokeMoveUpdate=s(a.prototype._strokeUpdate,this.throttle):this._strokeMoveUpdate=a.prototype._strokeUpdate,this.dotSize=i.dotSize||function(){return(this.minWidth+this.maxWidth)/2},this.penColor=i.penColor||"black",this.backgroundColor=i.backgroundColor||"rgba(0,0,0,0)",this.onBegin=i.onBegin,this.onEnd=i.onEnd,this._canvas=t,this._ctx=t.getContext("2d"),this.clear(),this._handleMouseDown=function(t){1===t.which&&(n._mouseButtonDown=!0,n._strokeBegin(t))},this._handleMouseMove=function(t){n._mouseButtonDown&&n._strokeMoveUpdate(t)},this._handleMouseUp=function(t){1===t.which&&n._mouseButtonDown&&(n._mouseButtonDown=!1,n._strokeEnd(t))},this._handleTouchStart=function(t){if(1===t.targetTouches.length){var e=t.changedTouches[0];n._strokeBegin(e)}},this._handleTouchMove=function(t){t.preventDefault();var e=t.targetTouches[0];n._strokeMoveUpdate(e)},this._handleTouchEnd=function(t){t.target===n._canvas&&(t.preventDefault(),n._strokeEnd(t))},this.on()}function h(t,e,n,i){var o,r=0;return"boolean"!=typeof e&&(i=n,n=e,e=void 0),function(){function s(){r=Number(new Date),n.apply(a,u)}var a=this,h=Number(new Date)-r,u=arguments;i&&!o&&s(),o&&clearTimeout(o),void 0===i&&t<h?s():!0!==e&&(o=setTimeout(i?function(){o=void 0}:s,void 0===i?t-h:t))}}function u(t,e,n){return void 0===n?h(t,e,!1):h(t,n,!1!==e)}var c=n(0),l=i(c),d=i(n(4));o.prototype.velocityFrom=function(t){return this.time!==t.time?this.distanceTo(t)/(this.time-t.time):1},o.prototype.distanceTo=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},o.prototype.equals=function(t){return this.x===t.x&&this.y===t.y&&this.time===t.time},r.prototype.length=function(){for(var t=0,e=void 0,n=void 0,i=0;i<=10;i+=1){var o=i/10,r=this._point(o,this.startPoint.x,this.control1.x,this.control2.x,this.endPoint.x),s=this._point(o,this.startPoint.y,this.control1.y,this.control2.y,this.endPoint.y);if(0<i){var a=r-e,h=s-n;t+=Math.sqrt(a*a+h*h)}e=r,n=s}return t},r.prototype._point=function(t,e,n,i,o){return e*(1-t)*(1-t)*(1-t)+3*n*(1-t)*(1-t)*t+3*i*(1-t)*t*t+o*t*t*t},a.prototype.clear=function(){var t=this._ctx,e=this._canvas;t.fillStyle=this.backgroundColor,t.clearRect(0,0,e.width,e.height),t.fillRect(0,0,e.width,e.height),this._data=[],this._reset(),this._isEmpty=!0},a.prototype.fromDataURL=function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},i=new Image,o=n.ratio||window.devicePixelRatio||1,r=n.width||this._canvas.width/o,s=n.height||this._canvas.height/o;this._reset(),i.src=t,i.onload=function(){e._ctx.drawImage(i,0,0,r,s)},this._isEmpty=!1},a.prototype.toDataURL=function(t){var e;switch(t){case"image/svg+xml":return this._toSVG();default:for(var n=arguments.length,i=Array(1<n?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return(e=this._canvas).toDataURL.apply(e,[t].concat(i))}},a.prototype.on=function(){this._handleMouseEvents(),this._handleTouchEvents()},a.prototype.off=function(){this._canvas.removeEventListener("mousedown",this._handleMouseDown),this._canvas.removeEventListener("mousemove",this._handleMouseMove),document.removeEventListener("mouseup",this._handleMouseUp),this._canvas.removeEventListener("touchstart",this._handleTouchStart),this._canvas.removeEventListener("touchmove",this._handleTouchMove),this._canvas.removeEventListener("touchend",this._handleTouchEnd)},a.prototype.isEmpty=function(){return this._isEmpty},a.prototype._strokeBegin=function(t){this._data.push([]),this._reset(),this._strokeUpdate(t),"function"==typeof this.onBegin&&this.onBegin(t)},a.prototype._strokeUpdate=function(t){var e=t.clientX,n=t.clientY,i=this._createPoint(e,n),o=this._data[this._data.length-1],r=o&&o[o.length-1],s=r&&i.distanceTo(r)<this.minDistance;if(!r||!s){var a=this._addPoint(i),h=a.curve,u=a.widths;h&&u&&this._drawCurve(h,u.start,u.end),this._data[this._data.length-1].push({x:i.x,y:i.y,time:i.time,color:this.penColor})}},a.prototype._strokeEnd=function(t){var e=2<this.points.length,n=this.points[0];if(!e&&n&&this._drawDot(n),n){var i=this._data[this._data.length-1],o=i[i.length-1];n.equals(o)||i.push({x:n.x,y:n.y,time:n.time,color:this.penColor})}"function"==typeof this.onEnd&&this.onEnd(t)},a.prototype._handleMouseEvents=function(){this._mouseButtonDown=!1,this._canvas.addEventListener("mousedown",this._handleMouseDown),this._canvas.addEventListener("mousemove",this._handleMouseMove),document.addEventListener("mouseup",this._handleMouseUp)},a.prototype._handleTouchEvents=function(){this._canvas.style.msTouchAction="none",this._canvas.style.touchAction="none",this._canvas.addEventListener("touchstart",this._handleTouchStart),this._canvas.addEventListener("touchmove",this._handleTouchMove),this._canvas.addEventListener("touchend",this._handleTouchEnd)},a.prototype._reset=function(){this.points=[],this._lastVelocity=0,this._lastWidth=(this.minWidth+this.maxWidth)/2,this._ctx.fillStyle=this.penColor},a.prototype._createPoint=function(t,e,n){var i=this._canvas.getBoundingClientRect();return new o(t-i.left,e-i.top,n||(new Date).getTime())},a.prototype._addPoint=function(t){var e=this.points;if(e.push(t),2<e.length){3===e.length&&e.unshift(e[0]);var n=this._calculateCurveControlPoints(e[0],e[1],e[2]).c2,i=this._calculateCurveControlPoints(e[1],e[2],e[3]).c1,o=new r(e[1],n,i,e[2]),s=this._calculateCurveWidths(o);return e.shift(),{curve:o,widths:s}}return{}},a.prototype._calculateCurveControlPoints=function(t,e,n){var i=t.x-e.x,r=t.y-e.y,s=e.x-n.x,a=e.y-n.y,h=(t.x+e.x)/2,u=(t.y+e.y)/2,c=(e.x+n.x)/2,l=(e.y+n.y)/2,d=Math.sqrt(i*i+r*r),p=Math.sqrt(s*s+a*a),f=p/(d+p),v=c+(h-c)*f,_=l+(u-l)*f,y=e.x-v,g=e.y-_;return{c1:new o(h+y,u+g),c2:new o(c+y,l+g)}},a.prototype._calculateCurveWidths=function(t){var e=t.startPoint,n=t.endPoint,i={start:null,end:null},o=this.velocityFilterWeight*n.velocityFrom(e)+(1-this.velocityFilterWeight)*this._lastVelocity,r=this._strokeWidth(o);return i.start=this._lastWidth,i.end=r,this._lastVelocity=o,this._lastWidth=r,i},a.prototype._strokeWidth=function(t){return Math.max(this.maxWidth/(t+1),this.minWidth)},a.prototype._drawPoint=function(t,e,n){var i=this._ctx;i.moveTo(t,e),i.arc(t,e,n,0,2*Math.PI,!1),this._isEmpty=!1},a.prototype._drawCurve=function(t,e,n){var i=this._ctx,o=n-e,r=Math.floor(t.length());i.beginPath();for(var s=0;s<r;s+=1){var a=s/r,h=a*a,u=h*a,c=1-a,l=c*c,d=l*c,p=d*t.startPoint.x;p+=3*l*a*t.control1.x,p+=3*c*h*t.control2.x,p+=u*t.endPoint.x;var f=d*t.startPoint.y;f+=3*l*a*t.control1.y,f+=3*c*h*t.control2.y,f+=u*t.endPoint.y;var v=e+u*o;this._drawPoint(p,f,v)}i.closePath(),i.fill()},a.prototype._drawDot=function(t){var e=this._ctx,n="function"==typeof this.dotSize?this.dotSize():this.dotSize;e.beginPath(),this._drawPoint(t.x,t.y,n),e.closePath(),e.fill()},a.prototype._fromData=function(t,e,n){for(var i=0;i<t.length;i+=1){var r=t[i];if(1<r.length)for(var s=0;s<r.length;s+=1){var a=r[s],h=new o(a.x,a.y,a.time),u=a.color;if(0===s)this.penColor=u,this._reset(),this._addPoint(h);else if(s!==r.length-1){var c=this._addPoint(h),l=c.curve,d=c.widths;l&&d&&e(l,d,u)}}else this._reset(),n(r[0])}},a.prototype._toSVG=function(){var t=this,e=this._data,n=this._canvas,i=Math.max(window.devicePixelRatio||1,1),o=n.width/i,r=n.height/i,s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.setAttributeNS(null,"width",n.width),s.setAttributeNS(null,"height",n.height),this._fromData(e,function(t,e,n){var i=document.createElement("path");if(!(isNaN(t.control1.x)||isNaN(t.control1.y)||isNaN(t.control2.x)||isNaN(t.control2.y))){var o="M "+t.startPoint.x.toFixed(3)+","+t.startPoint.y.toFixed(3)+" C "+t.control1.x.toFixed(3)+","+t.control1.y.toFixed(3)+" "+t.control2.x.toFixed(3)+","+t.control2.y.toFixed(3)+" "+t.endPoint.x.toFixed(3)+","+t.endPoint.y.toFixed(3);i.setAttribute("d",o),i.setAttribute("stroke-width",(2.25*e.end).toFixed(3)),i.setAttribute("stroke",n),i.setAttribute("fill","none"),i.setAttribute("stroke-linecap","round"),s.appendChild(i)}},function(e){var n=document.createElement("circle"),i="function"==typeof t.dotSize?t.dotSize():t.dotSize;n.setAttribute("r",i),n.setAttribute("cx",e.x),n.setAttribute("cy",e.y),n.setAttribute("fill",e.color),s.appendChild(n)});var a='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 '+o+" "+r+'" width="'+o+'" height="'+r+'">',h=s.innerHTML;if(void 0===h){var u=document.createElement("dummy"),c=s.childNodes;u.innerHTML="";for(var l=0;l<c.length;l+=1)u.appendChild(c[l].cloneNode(!0));h=u.innerHTML}return"data:image/svg+xml;base64,"+btoa(a+h+"</svg>")},a.prototype.fromData=function(t){var e=this;this.clear(),this._fromData(t,function(t,n){return e._drawCurve(t,n.start,n.end)},function(t){return e._drawDot(t)}),this._data=t},a.prototype.toData=function(){return this._data};var p=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),v=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},_=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},y=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},g=function(t){function e(t){p(this,e);var n=y(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.state={canvasWidth:0,canvasHeight:0},n._callResizeHandler=u(n.props.debounceInterval,n.handleResize.bind(n)),n}return _(e,t),f(e,[{key:"componentDidMount",value:function(){this._canvas&&(this.props.width&&this.props.height||(this._canvas.style.width="100%"),this.scaleCanvas(),this.props.width&&this.props.height||window.addEventListener("resize",this._callResizeHandler),this._signaturePad=new a(this._canvas,this.props.options))}},{key:"componentWillUnmount",value:function(){this.props.width&&this.props.height||window.removeEventListener("resize",this._callResizeHandler),this._signaturePad.off()}},{key:"isEmpty",value:function(){return this._signaturePad.isEmpty()}},{key:"clear",value:function(){this._signaturePad.clear()}},{key:"fromDataURL",value:function(t){this._signaturePad.fromDataURL(t)}},{key:"toDataURL",value:function(t){return this._signaturePad.toDataURL(t)}},{key:"fromData",value:function(t){this._signaturePad.fromData(t)}},{key:"toData",value:function(){return this._signaturePad.toData()}},{key:"off",value:function(){this._signaturePad.off()}},{key:"on",value:function(){this._signaturePad.on()}},{key:"handleResize",value:function(){this.scaleCanvas()}},{key:"scaleCanvas",value:function(){var t=Math.max(window.devicePixelRatio||1,1),e=(this.props.width||this._canvas.offsetWidth)*t,n=(this.props.height||this._canvas.offsetHeight)*t,i=this.state,o=i.canvasWidth,r=i.canvasHeight;if(e!==o||n!==r){var s=void 0;this.props.redrawOnResize&&this._signaturePad&&(s=this._signaturePad.toDataURL()),this._canvas.width=e,this._canvas.height=n,this.setState({canvasWidth:e,canvasHeight:n}),this._canvas.getContext("2d").scale(t,t),this.props.redrawOnResize&&this._signaturePad?this._signaturePad.fromDataURL(s):this._signaturePad&&this._signaturePad.clear()}}},{key:"render",value:function(){var t=this,e=this.props.canvasProps;return l.createElement("canvas",v({ref:function(e){return t._canvas=e}},e))}},{key:"instance",get:function(){return this._signaturePad}},{key:"canvas",get:function(){return this._canvas}},{key:"dotSize",set:function(t){this._signaturePad.dotSize=t},get:function(){return this._signaturePad.dotSize}},{key:"minWidth",set:function(t){this._signaturePad.minWidth=t},get:function(){return this._signaturePad.minWidth}},{key:"maxWidth",set:function(t){this._signaturePad.maxWidth=t},get:function(){return this._signaturePad.maxWidth}},{key:"throttle",set:function(t){this._signaturePad.throttle=t},get:function(){return this._signaturePad.throttle}},{key:"backgroundColor",set:function(t){this._signaturePad.backgroundColor=t},get:function(){return this._signaturePad.backgroundColor}},{key:"penColor",set:function(t){this._signaturePad.penColor=t},get:function(){return this._signaturePad.penColor}},{key:"velocityFilterWeight",set:function(t){this._signaturePad.velocityFilterWeight=t},get:function(){return this._signaturePad.velocityFilterWeight}},{key:"onBegin",set:function(t){if(!t||"function"!=typeof t)throw new Error("Invalid argument passed to onBegin()");this._signaturePad.onBegin=t}},{key:"onEnd",set:function(t){if(!t||"function"!=typeof t)throw new Error("Invalid argument passed to onEnd()");this._signaturePad.onEnd=t}}]),e}(c.PureComponent);g.displayName="react-signature-pad-wrapper",g.propTypes={width:d.number,height:d.number,options:d.object,redrawOnResize:d.bool.isRequired,debounceInterval:d.number.isRequired,canvasProps:d.object},g.defaultProps={redrawOnResize:!1,debounceInterval:150},t.exports=g},function(t,e,n){t.exports=n(5)()},function(t,e,n){"use strict";function i(){}var o=n(6);t.exports=function(){function t(t,e,n,i,r,s){if(s!==o){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return n.checkPropTypes=i,n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,