!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){e.exports=n(8)()},function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(14),r=function(){function e(e){if(this.ExternalId=null,this.IsSelected=!1,this.Order=0,this.Properties={},e&&e[0]){var t=e[0];this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected;for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];this.Properties[i.developerName]=new o.FlowObjectDataProperty(i)}}}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!0,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:null,internalId:manywho.utils.guid(),isSelected:!0,order:0,properties:[]}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.iObjectData=function(){for(var e=[],t=0,n=Object.keys(this.properties);t<n.length;t++){var o=n[t];e.push(this.properties[o].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:this.isSelected,order:this.order,properties:e}},e.prototype.iFlowObjectDataArray=function(){var e=[];return e.push(this.iObjectData()),e},e}();t.FlowObjectData=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(2),i=n(4);!function(e){e[e.ContentString=0]="ContentString",e[e.ContentNumber=1]="ContentNumber",e[e.ContentObject=2]="ContentObject",e[e.ContentBoolean=3]="ContentBoolean",e[e.ContentList=4]="ContentList",e[e.ContentPassword=5]="ContentPassword",e[e.ContentContent=6]="ContentContent",e[e.ContentDateTime=7]="ContentDateTime",e[e.ContentEncrypted=8]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData&&e.objectData[0]?new r.FlowObjectData(e.objectData):null;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowField=function(){var e,t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(3),i=n(2);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new i.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!0,configurable:!0}),e.prototype.sort=function(e,t){return void 0===e&&(e=o.ascending),e===o.ascending?t?this.Items.sort(function(e,n){var o,i;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:o=e.properties[t].value,i=n.properties[t].value}switch(!0){case o<i:return-1;case o>i:return 1;default:return 0}}):this.Items.sort(function(e,t){return e.order-t.order}):t?this.Items.sort(function(e,n){switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}}):this.Items.sort(function(e,t){return e.order-t.order})},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.iFlowObjectDataArray=function(){for(var e=[],t=0,n=this.Items;t<n.length;t++){var o=n[t];e.push(o.iObjectData())}return e},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,i=this.Items;o<i.length;o++){var a=i[o];if(a.properties[e]&&a.properties[e].value){var s=a.properties[e].value,u=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:s=s.toLowerCase(),u=u.toLowerCase();break;case r.eContentType.ContentNumber:s=s,u=parseFloat(u.toLowerCase());break;case r.eContentType.ContentBoolean:s=s,u="true"===new String(u).toLowerCase()}if(s===u)return a.properties[n]}}return null},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[e]&&i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(s.toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return i}}},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!0,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(7))},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,s)}u((o=o.apply(e,t||[])).next())})},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(1),u=n(16);n(10);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.clearSignature=n.clearSignature.bind(n),n.strokeEnd=n.strokeEnd.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){return a(this,function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[2]}})})},t.prototype.clearSignature=function(){this.sigpad.clear();var e=this.sigpad.toDataURL();this.setStateValue(e)},t.prototype.strokeEnd=function(){var e=this.sigpad.toDataURL();this.setStateValue(e)},t.prototype.render=function(){var e=this,t={width:"100px",height:"70",penColor:"#000000",redrawOnResize:!0};t.onEnd=this.strokeEnd;var n=this.getAttribute("title")||"Signature - please draw your signature in the area below";return s.createElement("div",{className:"signature-box"},s.createElement("div",{className:"signature-box-header"},s.createElement("div",{style:{float:"left"}},s.createElement("span",{className:"signature-box-header-title"},n)),s.createElement("div",{style:{float:"right"}},s.createElement("span",{className:"glyphicon glyphicon-remove signature-box-header-button",onClick:this.clearSignature}))),s.createElement("div",{className:"signature-box-body"},s.createElement(u.default,{ref:function(t){e.sigpad=t},redrawOnResize:!0,options:t})))},t}(n(11).FlowComponent);manywho.component.register("SignatureBox",c),t.default=c},function(e,t,n){"use strict";var o=n(9);function r(){}function i(){}i.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,i,a){if(a!==o){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:r};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,s)}u((o=o.apply(e,t||[])).next())})},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){return a(this,function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadValues()];case 2:return t.sent(),[2]}})})},t}(n(12).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,s)}u((o=o.apply(e,t||[])).next())})},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(1),u=n(5),c=n(13),l=n(3),p=n(2),h=n(4),d=n(15);manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners=[],manywho.eventManager.doneListeners=[],manywho.eventManager.failListeners=[],manywho.eventManager.beforeSend=function(e,t){manywho.eventManager.beforeSendListeners.forEach(function(n){return n(e,t)})},manywho.eventManager.done=function(e,t){manywho.eventManager.doneListeners.forEach(function(n){return n(e,t)})},manywho.eventManager.fail=function(e,t){manywho.eventManager.failListeners.forEach(function(n){return n(e,t)})},manywho.eventManager.addBeforeSendListener=function(e){manywho.eventManager.beforeSendListeners.push(e)},manywho.eventManager.addDoneListener=function(e){manywho.eventManager.doneListeners.push(e)},manywho.eventManager.addFailListener=function(e){manywho.eventManager.failListeners.push(e)},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}));var f=function(e){function t(t){var n=e.call(this,t)||this;n.IsLoading=!0,n.Fields={},n.LoadingState="initial",n.loadValues=n.loadValues.bind(n),n.dontLoadValues=n.dontLoadValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o=manywho.settings.global("platform.uri")||"https://flow.manywho.com";return n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isLoading",{get:function(){return this.IsLoading},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!0,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){var e,t,n,o;return a(this,function(r){switch(e=manywho.model.getComponent(this.ComponentId,this.FlowKey),t=manywho.state.getComponent(this.componentId,this.flowKey)||{},e.contentType){case"ContentObject":case"ContentList":n=void 0,t.objectData&&(n=t.objectData,n=JSON.parse(JSON.stringify(n))),o={objectData:n},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:t.contentValue=e.contentValue}return manywho.utils.removeLoadingIndicator("loader"),[2]})})},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new d.FlowOutcome(o)}for(var r=0,i=e=manywho.model.getOutcomes(null,this.props.flowKey);r<i.length;r++){o=i[r];this.Outcomes[o.developerName]=new d.FlowOutcome(o)}},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).attributes;if(e)for(var t=0,n=Object.keys(e);t<n.length;t++){var o=n[t];this.Attributes[o]=new u.FlowAttribute(o,e[o])}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([r]))}var i=e.columns;if(i)for(var a=0,s=i;a<s.length;a++){var u=s[a];this.Model.displayColumns.push(new c.FlowDisplayColumn(u))}}},t.prototype.loadValues=function(){return i(this,void 0,void 0,function(){var e,t,n,o=this;return a(this,function(r){switch(r.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.Fields={},[4,manywho.connection.request(this,null,this.url,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 1:return(r.sent()||[]).map(function(e){o.Fields[e.developerName]=new l.FlowField(e)}),[4,manywho.connection.request(this,null,this.userurl,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 2:return e=r.sent(),t=new l.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value},this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]}})})},t.prototype.dontLoadValues=function(){return i(this,void 0,void 0,function(){return a(this,function(e){return this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]})})},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new p.FlowObjectData(e.objectData[0]);case"ContentList":return new h.FlowObjectDataArray(e.objectData);default:return e.contentValue}},t.prototype.getStateValueType=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new p.FlowObjectData(e.objectData[0]);case"ContentList":return new h.FlowObjectDataArray(e.objectData);default:return e.contentValue}},t.prototype.setStateValue=function(e){return i(this,void 0,void 0,function(){var t,n,o,r,i;return a(this,function(a){switch(t=manywho.model.getComponent(this.ComponentId,this.FlowKey),n=manywho.state.getComponent(this.componentId,this.flowKey)||{},t.contentType){case"ContentObject":r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r)),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(r)),o={objectDataArray:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":n.contentValue=e.toISOString();break;default:n.contentValue=e}return[2]})})},t.prototype.updateValues=function(e){return i(this,void 0,void 0,function(){var t,n,o,r;return a(this,function(i){switch(i.label){case 0:for(this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),t=[],n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,manywho.connection.request(this,null,this.url,"POST",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),t)];case 1:return i.sent(),[2]}})})},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,function(){var n;return a(this,function(o){switch(o.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),t||(t=null),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2]}})})},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return i(this,void 0,void 0,function(){var e,n,r;return a(this,function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,null,n,"POST",this.TenantId,null,manywho.state.getAuthenticationToken(this.FlowKey),r),[2]})})},t.prototype.launchFlowTab=function(e,t,n,o){return i(this,void 0,void 0,function(){var o,r;return a(this,function(i){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2]})})},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,function(){var t;return a(this,function(n){switch(n.label){case 0:if(!e.data.data)return[3,5];if(!(t=JSON.parse(e.data.data)).action)return[3,5];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1]}return[3,3];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,5];case 3:return[4,this.handleMessage(t)];case 4:return n.sent(),[3,5];case 5:return[2]}})})},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,function(){return a(this,function(e){return[2]})})},t}(s.Component);t.FlowBaseComponent=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=e.contentType,this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!0,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),r=n(2),i=n(4),a=function(){function e(e){switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat,this.TypeElementId=e.typeElementId,this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):null;break;case o.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue}}return e.newInstance=function(e,t,n){var r,i=[];switch(t){case o.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case o.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:null,contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:i,typeElementId:null,typeElementPropertyId:null})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowObjectDataProperty=function(){var e,t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){"use strict";n.r(t);var o=n(1),r=n.n(o),i=n(0),a=n.n(i);
/*!
 * Signature Pad v2.3.2
 * https://github.com/szimek/signature_pad
 *
 * Copyright 2017 Szymon Nowak
 * Released under the MIT license
 *
 * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:
 * http://corner.squareup.com/2012/07/smoother-signatures.html
 *
 * Implementation of interpolation using cubic Bézier curves is taken from:
 * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript
 *
 * Algorithm for approximated length of a Bézier curve is taken from:
 * http://www.lemoda.net/maths/bezier-length/index.html
 *
 */
function s(e,t,n){this.x=e,this.y=t,this.time=n||(new Date).getTime()}function u(e,t,n,o){this.startPoint=e,this.control1=t,this.control2=n,this.endPoint=o}function c(e,t){var n=this,o=t||{};this.velocityFilterWeight=o.velocityFilterWeight||.7,this.minWidth=o.minWidth||.5,this.maxWidth=o.maxWidth||2.5,this.throttle="throttle"in o?o.throttle:16,this.minDistance="minDistance"in o?o.minDistance:5,this.throttle?this._strokeMoveUpdate=function(e,t,n){var o,r,i,a=null,s=0;n||(n={});var u=function(){s=!1===n.leading?0:Date.now(),a=null,i=e.apply(o,r),a||(o=r=null)};return function(){var c=Date.now();s||!1!==n.leading||(s=c);var l=t-(c-s);return o=this,r=arguments,l<=0||l>t?(a&&(clearTimeout(a),a=null),s=c,i=e.apply(o,r),a||(o=r=null)):a||!1===n.trailing||(a=setTimeout(u,l)),i}}(c.prototype._strokeUpdate,this.throttle):this._strokeMoveUpdate=c.prototype._strokeUpdate,this.dotSize=o.dotSize||function(){return(this.minWidth+this.maxWidth)/2},this.penColor=o.penColor||"black",this.backgroundColor=o.backgroundColor||"rgba(0,0,0,0)",this.onBegin=o.onBegin,this.onEnd=o.onEnd,this._canvas=e,this._ctx=e.getContext("2d"),this.clear(),this._handleMouseDown=function(e){1===e.which&&(n._mouseButtonDown=!0,n._strokeBegin(e))},this._handleMouseMove=function(e){n._mouseButtonDown&&n._strokeMoveUpdate(e)},this._handleMouseUp=function(e){1===e.which&&n._mouseButtonDown&&(n._mouseButtonDown=!1,n._strokeEnd(e))},this._handleTouchStart=function(e){if(1===e.targetTouches.length){var t=e.changedTouches[0];n._strokeBegin(t)}},this._handleTouchMove=function(e){e.preventDefault();var t=e.targetTouches[0];n._strokeMoveUpdate(t)},this._handleTouchEnd=function(e){e.target===n._canvas&&(e.preventDefault(),n._strokeEnd(e))},this.on()}s.prototype.velocityFrom=function(e){return this.time!==e.time?this.distanceTo(e)/(this.time-e.time):1},s.prototype.distanceTo=function(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))},s.prototype.equals=function(e){return this.x===e.x&&this.y===e.y&&this.time===e.time},u.prototype.length=function(){for(var e=0,t=void 0,n=void 0,o=0;o<=10;o+=1){var r=o/10,i=this._point(r,this.startPoint.x,this.control1.x,this.control2.x,this.endPoint.x),a=this._point(r,this.startPoint.y,this.control1.y,this.control2.y,this.endPoint.y);if(o>0){var s=i-t,u=a-n;e+=Math.sqrt(s*s+u*u)}t=i,n=a}return e},u.prototype._point=function(e,t,n,o,r){return t*(1-e)*(1-e)*(1-e)+3*n*(1-e)*(1-e)*e+3*o*(1-e)*e*e+r*e*e*e},c.prototype.clear=function(){var e=this._ctx,t=this._canvas;e.fillStyle=this.backgroundColor,e.clearRect(0,0,t.width,t.height),e.fillRect(0,0,t.width,t.height),this._data=[],this._reset(),this._isEmpty=!0},c.prototype.fromDataURL=function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=new Image,r=n.ratio||window.devicePixelRatio||1,i=n.width||this._canvas.width/r,a=n.height||this._canvas.height/r;this._reset(),o.src=e,o.onload=function(){t._ctx.drawImage(o,0,0,i,a)},this._isEmpty=!1},c.prototype.toDataURL=function(e){var t;switch(e){case"image/svg+xml":return this._toSVG();default:for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];return(t=this._canvas).toDataURL.apply(t,[e].concat(o))}},c.prototype.on=function(){this._handleMouseEvents(),this._handleTouchEvents()},c.prototype.off=function(){this._canvas.removeEventListener("mousedown",this._handleMouseDown),this._canvas.removeEventListener("mousemove",this._handleMouseMove),document.removeEventListener("mouseup",this._handleMouseUp),this._canvas.removeEventListener("touchstart",this._handleTouchStart),this._canvas.removeEventListener("touchmove",this._handleTouchMove),this._canvas.removeEventListener("touchend",this._handleTouchEnd)},c.prototype.isEmpty=function(){return this._isEmpty},c.prototype._strokeBegin=function(e){this._data.push([]),this._reset(),this._strokeUpdate(e),"function"==typeof this.onBegin&&this.onBegin(e)},c.prototype._strokeUpdate=function(e){var t=e.clientX,n=e.clientY,o=this._createPoint(t,n),r=this._data[this._data.length-1],i=r&&r[r.length-1],a=i&&o.distanceTo(i)<this.minDistance;if(!i||!a){var s=this._addPoint(o),u=s.curve,c=s.widths;u&&c&&this._drawCurve(u,c.start,c.end),this._data[this._data.length-1].push({x:o.x,y:o.y,time:o.time,color:this.penColor})}},c.prototype._strokeEnd=function(e){var t=this.points.length>2,n=this.points[0];if(!t&&n&&this._drawDot(n),n){var o=this._data[this._data.length-1],r=o[o.length-1];n.equals(r)||o.push({x:n.x,y:n.y,time:n.time,color:this.penColor})}"function"==typeof this.onEnd&&this.onEnd(e)},c.prototype._handleMouseEvents=function(){this._mouseButtonDown=!1,this._canvas.addEventListener("mousedown",this._handleMouseDown),this._canvas.addEventListener("mousemove",this._handleMouseMove),document.addEventListener("mouseup",this._handleMouseUp)},c.prototype._handleTouchEvents=function(){this._canvas.style.msTouchAction="none",this._canvas.style.touchAction="none",this._canvas.addEventListener("touchstart",this._handleTouchStart),this._canvas.addEventListener("touchmove",this._handleTouchMove),this._canvas.addEventListener("touchend",this._handleTouchEnd)},c.prototype._reset=function(){this.points=[],this._lastVelocity=0,this._lastWidth=(this.minWidth+this.maxWidth)/2,this._ctx.fillStyle=this.penColor},c.prototype._createPoint=function(e,t,n){var o=this._canvas.getBoundingClientRect();return new s(e-o.left,t-o.top,n||(new Date).getTime())},c.prototype._addPoint=function(e){var t=this.points;if(t.push(e),t.length>2){3===t.length&&t.unshift(t[0]);var n=this._calculateCurveControlPoints(t[0],t[1],t[2]).c2,o=this._calculateCurveControlPoints(t[1],t[2],t[3]).c1,r=new u(t[1],n,o,t[2]),i=this._calculateCurveWidths(r);return t.shift(),{curve:r,widths:i}}return{}},c.prototype._calculateCurveControlPoints=function(e,t,n){var o=e.x-t.x,r=e.y-t.y,i=t.x-n.x,a=t.y-n.y,u=(e.x+t.x)/2,c=(e.y+t.y)/2,l=(t.x+n.x)/2,p=(t.y+n.y)/2,h=Math.sqrt(o*o+r*r),d=Math.sqrt(i*i+a*a),f=d/(h+d),y=l+(u-l)*f,m=p+(c-p)*f,b=t.x-y,v=t.y-m;return{c1:new s(u+b,c+v),c2:new s(l+b,p+v)}},c.prototype._calculateCurveWidths=function(e){var t=e.startPoint,n=e.endPoint,o={start:null,end:null},r=this.velocityFilterWeight*n.velocityFrom(t)+(1-this.velocityFilterWeight)*this._lastVelocity,i=this._strokeWidth(r);return o.start=this._lastWidth,o.end=i,this._lastVelocity=r,this._lastWidth=i,o},c.prototype._strokeWidth=function(e){return Math.max(this.maxWidth/(e+1),this.minWidth)},c.prototype._drawPoint=function(e,t,n){var o=this._ctx;o.moveTo(e,t),o.arc(e,t,n,0,2*Math.PI,!1),this._isEmpty=!1},c.prototype._drawCurve=function(e,t,n){var o=this._ctx,r=n-t,i=Math.floor(e.length());o.beginPath();for(var a=0;a<i;a+=1){var s=a/i,u=s*s,c=u*s,l=1-s,p=l*l,h=p*l,d=h*e.startPoint.x;d+=3*p*s*e.control1.x,d+=3*l*u*e.control2.x,d+=c*e.endPoint.x;var f=h*e.startPoint.y;f+=3*p*s*e.control1.y,f+=3*l*u*e.control2.y,f+=c*e.endPoint.y;var y=t+c*r;this._drawPoint(d,f,y)}o.closePath(),o.fill()},c.prototype._drawDot=function(e){var t=this._ctx,n="function"==typeof this.dotSize?this.dotSize():this.dotSize;t.beginPath(),this._drawPoint(e.x,e.y,n),t.closePath(),t.fill()},c.prototype._fromData=function(e,t,n){for(var o=0;o<e.length;o+=1){var r=e[o];if(r.length>1)for(var i=0;i<r.length;i+=1){var a=r[i],u=new s(a.x,a.y,a.time),c=a.color;if(0===i)this.penColor=c,this._reset(),this._addPoint(u);else if(i!==r.length-1){var l=this._addPoint(u),p=l.curve,h=l.widths;p&&h&&t(p,h,c)}}else this._reset(),n(r[0])}},c.prototype._toSVG=function(){var e=this,t=this._data,n=this._canvas,o=Math.max(window.devicePixelRatio||1,1),r=n.width/o,i=n.height/o,a=document.createElementNS("http://www.w3.org/2000/svg","svg");a.setAttributeNS(null,"width",n.width),a.setAttributeNS(null,"height",n.height),this._fromData(t,function(e,t,n){var o=document.createElement("path");if(!(isNaN(e.control1.x)||isNaN(e.control1.y)||isNaN(e.control2.x)||isNaN(e.control2.y))){var r="M "+e.startPoint.x.toFixed(3)+","+e.startPoint.y.toFixed(3)+" C "+e.control1.x.toFixed(3)+","+e.control1.y.toFixed(3)+" "+e.control2.x.toFixed(3)+","+e.control2.y.toFixed(3)+" "+e.endPoint.x.toFixed(3)+","+e.endPoint.y.toFixed(3);o.setAttribute("d",r),o.setAttribute("stroke-width",(2.25*t.end).toFixed(3)),o.setAttribute("stroke",n),o.setAttribute("fill","none"),o.setAttribute("stroke-linecap","round"),a.appendChild(o)}},function(t){var n=document.createElement("circle"),o="function"==typeof e.dotSize?e.dotSize():e.dotSize;n.setAttribute("r",o),n.setAttribute("cx",t.x),n.setAttribute("cy",t.y),n.setAttribute("fill",t.color),a.appendChild(n)});var s='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 '+r+" "+i+'" width="'+r+'" height="'+i+'">',u=a.innerHTML;if(void 0===u){var c=document.createElement("dummy"),l=a.childNodes;c.innerHTML="";for(var p=0;p<l.length;p+=1)c.appendChild(l[p].cloneNode(!0));u=c.innerHTML}return"data:image/svg+xml;base64,"+btoa(s+u+"</svg>")},c.prototype.fromData=function(e){var t=this;this.clear(),this._fromData(e,function(e,n){return t._drawCurve(e,n.start,n.end)},function(e){return t._drawDot(e)}),this._data=e},c.prototype.toData=function(){return this._data};var l=c;function p(e,t,n,o){var r,i=!1,a=0;function s(){r&&clearTimeout(r)}function u(){var u=this,c=Date.now()-a,l=arguments;function p(){a=Date.now(),n.apply(u,l)}i||(o&&!r&&p(),s(),void 0===o&&c>e?p():!0!==t&&(r=setTimeout(o?function(){r=void 0}:p,void 0===o?e-c:e)))}return"boolean"!=typeof t&&(o=n,n=t,t=void 0),u.cancel=function(){s(),i=!0},u}function h(e,t){return e(t={exports:{}},t.exports),t.exports}var d=h(function(e){function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},t.apply(this,arguments)}e.exports=t}),f=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};function y(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var m=h(function(e){function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(o){return"function"==typeof Symbol&&"symbol"===t(Symbol.iterator)?e.exports=n=function(e){return t(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":t(e)},n(o)}e.exports=n}),b=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},v=function(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?b(e):t},g=h(function(e){function t(n){return e.exports=t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},t(n)}e.exports=t}),w=h(function(e){function t(n,o){return e.exports=t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},t(n,o)}e.exports=t}),_=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},P=function(e){function t(e){var n,o,r,i;return f(this,t),(n=v(this,g(t).call(this,e))).state={canvasWidth:0,canvasHeight:0},n._callResizeHandler=(o=n.props.debounceInterval,r=n.handleResize.bind(b(n)),void 0===i?p(o,r,!1):p(o,i,!1!==r)),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,o.PureComponent),function(e,t,n){t&&y(e.prototype,t),n&&y(e,n)}(t,[{key:"componentDidMount",value:function(){this._canvas&&(this.props.width&&this.props.height||(this._canvas.style.width="100%"),this.scaleCanvas(),this.props.width&&this.props.height||window.addEventListener("resize",this._callResizeHandler),this._signaturePad=new l(this._canvas,this.props.options))}},{key:"componentWillUnmount",value:function(){this.props.width&&this.props.height||window.removeEventListener("resize",this._callResizeHandler),this._signaturePad.off()}},{key:"isEmpty",value:function(){return this._signaturePad.isEmpty()}},{key:"clear",value:function(){this._signaturePad.clear()}},{key:"fromDataURL",value:function(e){this._signaturePad.fromDataURL(e)}},{key:"toDataURL",value:function(e){return this._signaturePad.toDataURL(e)}},{key:"fromData",value:function(e){this._signaturePad.fromData(e)}},{key:"toData",value:function(){return this._signaturePad.toData()}},{key:"off",value:function(){this._signaturePad.off()}},{key:"on",value:function(){this._signaturePad.on()}},{key:"handleResize",value:function(){this.scaleCanvas()}},{key:"scaleCanvas",value:function(){var e,t=Math.max(window.devicePixelRatio||1,1),n=(this.props.width||this._canvas.offsetWidth)*t,o=(this.props.height||this._canvas.offsetHeight)*t,r=this.state,i=r.canvasWidth,a=r.canvasHeight;n===i&&o===a||(this.props.redrawOnResize&&this._signaturePad&&(e=this._signaturePad.toDataURL()),this._canvas.width=n,this._canvas.height=o,this.setState({canvasWidth:n,canvasHeight:o}),this._canvas.getContext("2d").scale(t,t),this.props.redrawOnResize&&this._signaturePad?this._signaturePad.fromDataURL(e):this._signaturePad&&this._signaturePad.clear())}},{key:"render",value:function(){var e=this,t=this.props.canvasProps;return r.a.createElement("canvas",d({ref:function(t){return e._canvas=t}},t))}},{key:"instance",get:function(){return this._signaturePad}},{key:"canvas",get:function(){return this._canvas}},{key:"dotSize",set:function(e){this._signaturePad.dotSize=e},get:function(){return this._signaturePad.dotSize}},{key:"minWidth",set:function(e){this._signaturePad.minWidth=e},get:function(){return this._signaturePad.minWidth}},{key:"maxWidth",set:function(e){this._signaturePad.maxWidth=e},get:function(){return this._signaturePad.maxWidth}},{key:"throttle",set:function(e){this._signaturePad.throttle=e},get:function(){return this._signaturePad.throttle}},{key:"backgroundColor",set:function(e){this._signaturePad.backgroundColor=e},get:function(){return this._signaturePad.backgroundColor}},{key:"penColor",set:function(e){this._signaturePad.penColor=e},get:function(){return this._signaturePad.penColor}},{key:"velocityFilterWeight",set:function(e){this._signaturePad.velocityFilterWeight=e},get:function(){return this._signaturePad.velocityFilterWeight}},{key:"onBegin",set:function(e){if(!e||"function"!=typeof e)throw new Error("Invalid argument passed to onBegin()");this._signaturePad.onBegin=e}},{key:"onEnd",set:function(e){if(!e||"function"!=typeof e)throw new Error("Invalid argument passed to onEnd()");this._signaturePad.onEnd=e}}]),t}();_(P,"displayName","react-signature-pad-wrapper"),_(P,"propTypes",{width:a.a.number,height:a.a.number,options:a.a.object,redrawOnResize:a.a.bool.isRequired,debounceInterval:a.a.number.isRequired,canvasProps:a.a.object}),_(P,"defaultProps",{redrawOnResize:!1,debounceInterval:150});t.default=P}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,